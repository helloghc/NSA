{"ast":null,"code":"import Validator from '../utils/validator';\nimport Schema from '../utils/schema';\nimport BaseModel from '../utils/basemodel';\n/**\n * @const\n * Constant array with the two possible values for type\n */\n\nconst TYPES = ['Image', 'SocialMedia', 'Video'];\nconst NETWORK = ['facebook', 'twitter', 'instagram', 'socialmedia', 'youtube'];\n/**\n * @const\n * Schema to validate the class\n */\n\nconst schema = new Schema({\n  type: {\n    type: String,\n    enum: TYPES\n  },\n  text: {\n    type: String\n  },\n  url: {\n    type: String\n  },\n  network: {\n    type: String\n  },\n  _searchText: {\n    type: String,\n    enum: NETWORK\n  }\n});\n/**\n * Class to manage the Media object\n * @class Media\n */\n\nclass SocialMedia extends BaseModel {\n  /**\n   * Creates an instance of SocialMedia.\n   * @param {any} media\n   * @memberof SocialMedia\n   */\n  constructor(media) {\n    super(schema, 'media');\n    Object.keys(media).forEach(key => {\n      this[key] = media[key];\n    });\n  }\n  /* youtube */\n\n\n  getYouTubeId() {\n    if (this.network === 'youtube') {\n      const regexp = /^((?:https?:)?\\/\\/)?((?:www|m)\\.)?((?:youtube\\.com|youtu.be))(\\/(?:[\\w-]+\\?v=|embed\\/|v\\/)?)([\\w-]+)(\\S+)?$/;\n      const match = regexp.exec(this.url);\n      const ytId = match[5];\n      return ytId;\n    }\n\n    return null;\n  }\n\n  getYouTubeThumb() {\n    let quality = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hq';\n    const ytId = this.getYouTubeId();\n\n    if (ytId) {\n      switch (quality) {\n        case 'full':\n          return `https://img.youtube.com/vi/${ytId}/maxresdefault.jpg`;\n\n        case 'hq':\n          return `https://img.youtube.com/vi/${ytId}/hqdefault.jpg`;\n\n        case 'mq':\n          return `https://img.youtube.com/vi/${ytId}/mqdefault.jpg`;\n\n        default:\n          return null;\n      }\n    }\n\n    return null;\n  }\n\n  getYouTubeEmbed() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 350;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 350;\n    const ytId = this.getYouTubeId();\n\n    if (ytId) {\n      return `<iframe width=\"${width}\" height=\"${height}\" src=\"https://www.youtube.com/embed/${ytId}?rel=0&amp;controls=1&amp;showinfo=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>`;\n    }\n\n    return null;\n  }\n\n  getTwitterId() {\n    if (this.network === 'twitter') {\n      const regexp = /https?:\\/\\/twitter.com\\/[a-zA-Z_0-9]{1,20}\\/status\\/([0-9]*)/;\n      const match = regexp.exec(this.url);\n      const twitterId = match[1];\n      return twitterId;\n    }\n\n    return null;\n  }\n\n}\n/**\n * New validator to validate the schema\n */\n// const validator = new Validator(schema);\n\n/**\n * New object with proxy to control the setter and constructor\n */\n\n/* const ProxyMedia = validator.generateProxy(SocialMedia);\n\nexport default ProxyMedia; */\n\n\nexport default SocialMedia;","map":{"version":3,"names":["Validator","Schema","BaseModel","TYPES","NETWORK","schema","type","String","enum","text","url","network","_searchText","SocialMedia","constructor","media","Object","keys","forEach","key","getYouTubeId","regexp","match","exec","ytId","getYouTubeThumb","quality","getYouTubeEmbed","width","height","getTwitterId","twitterId"],"sources":["/var/www/html/nuevo-skyalert-react/src/models/SocialMedia.js"],"sourcesContent":["import Validator from '../utils/validator';\nimport Schema from '../utils/schema';\nimport BaseModel from '../utils/basemodel';\n\n/**\n * @const\n * Constant array with the two possible values for type\n */\nconst TYPES = ['Image', 'SocialMedia', 'Video'];\n\nconst NETWORK = ['facebook', 'twitter', 'instagram', 'socialmedia', 'youtube'];\n\n/**\n * @const\n * Schema to validate the class\n */\nconst schema = new Schema({\n  type: {\n    type: String,\n    enum: TYPES,\n  },\n  text: {\n    type: String,\n  },\n  url: {\n    type: String,\n  },\n  network: {\n    type: String,\n  },\n  _searchText: {\n    type: String,\n    enum: NETWORK,\n  },\n});\n\n/**\n * Class to manage the Media object\n * @class Media\n */\nclass SocialMedia extends BaseModel {\n  /**\n   * Creates an instance of SocialMedia.\n   * @param {any} media\n   * @memberof SocialMedia\n   */\n  constructor(media) {\n    super(schema, 'media');\n    Object.keys(media).forEach((key) => {\n      this[key] = media[key];\n    });\n  }\n\n  /* youtube */\n\n  getYouTubeId() {\n    if (this.network === 'youtube') {\n      const regexp = /^((?:https?:)?\\/\\/)?((?:www|m)\\.)?((?:youtube\\.com|youtu.be))(\\/(?:[\\w-]+\\?v=|embed\\/|v\\/)?)([\\w-]+)(\\S+)?$/;\n      const match = regexp.exec(this.url);\n      const ytId = match[5];\n      return ytId;\n    }\n    return null;\n  }\n\n  getYouTubeThumb(quality = 'hq') {\n    const ytId = this.getYouTubeId();\n    if (ytId) {\n      switch (quality) {\n      case 'full':\n        return `https://img.youtube.com/vi/${ytId}/maxresdefault.jpg`;\n      case 'hq':\n        return `https://img.youtube.com/vi/${ytId}/hqdefault.jpg`;\n      case 'mq':\n        return `https://img.youtube.com/vi/${ytId}/mqdefault.jpg`;\n      default:\n        return null;\n      }\n    }\n    return null;\n  }\n\n  getYouTubeEmbed(width = 350, height = 350) {\n    const ytId = this.getYouTubeId();\n    if (ytId) {\n      return `<iframe width=\"${width}\" height=\"${height}\" src=\"https://www.youtube.com/embed/${ytId}?rel=0&amp;controls=1&amp;showinfo=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>`;\n    }\n    return null;\n  }\n\n  getTwitterId() {\n    if (this.network === 'twitter') {\n      const regexp = /https?:\\/\\/twitter.com\\/[a-zA-Z_0-9]{1,20}\\/status\\/([0-9]*)/;\n      const match = regexp.exec(this.url);\n      const twitterId = match[1];\n      return twitterId;\n    }\n    return null;\n  }\n}\n\n/**\n * New validator to validate the schema\n */\n// const validator = new Validator(schema);\n\n/**\n * New object with proxy to control the setter and constructor\n */\n/* const ProxyMedia = validator.generateProxy(SocialMedia);\n\nexport default ProxyMedia; */\n\nexport default SocialMedia;\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAG,CAAC,OAAD,EAAU,aAAV,EAAyB,OAAzB,CAAd;AAEA,MAAMC,OAAO,GAAG,CAAC,UAAD,EAAa,SAAb,EAAwB,WAAxB,EAAqC,aAArC,EAAoD,SAApD,CAAhB;AAEA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG,IAAIJ,MAAJ,CAAW;EACxBK,IAAI,EAAE;IACJA,IAAI,EAAEC,MADF;IAEJC,IAAI,EAAEL;EAFF,CADkB;EAKxBM,IAAI,EAAE;IACJH,IAAI,EAAEC;EADF,CALkB;EAQxBG,GAAG,EAAE;IACHJ,IAAI,EAAEC;EADH,CARmB;EAWxBI,OAAO,EAAE;IACPL,IAAI,EAAEC;EADC,CAXe;EAcxBK,WAAW,EAAE;IACXN,IAAI,EAAEC,MADK;IAEXC,IAAI,EAAEJ;EAFK;AAdW,CAAX,CAAf;AAoBA;AACA;AACA;AACA;;AACA,MAAMS,WAAN,SAA0BX,SAA1B,CAAoC;EAClC;AACF;AACA;AACA;AACA;EACEY,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMV,MAAN,EAAc,OAAd;IACAW,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA4BC,GAAD,IAAS;MAClC,KAAKA,GAAL,IAAYJ,KAAK,CAACI,GAAD,CAAjB;IACD,CAFD;EAGD;EAED;;;EAEAC,YAAY,GAAG;IACb,IAAI,KAAKT,OAAL,KAAiB,SAArB,EAAgC;MAC9B,MAAMU,MAAM,GAAG,6GAAf;MACA,MAAMC,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,KAAKb,GAAjB,CAAd;MACA,MAAMc,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAlB;MACA,OAAOE,IAAP;IACD;;IACD,OAAO,IAAP;EACD;;EAEDC,eAAe,GAAiB;IAAA,IAAhBC,OAAgB,uEAAN,IAAM;IAC9B,MAAMF,IAAI,GAAG,KAAKJ,YAAL,EAAb;;IACA,IAAII,IAAJ,EAAU;MACR,QAAQE,OAAR;QACA,KAAK,MAAL;UACE,OAAQ,8BAA6BF,IAAK,oBAA1C;;QACF,KAAK,IAAL;UACE,OAAQ,8BAA6BA,IAAK,gBAA1C;;QACF,KAAK,IAAL;UACE,OAAQ,8BAA6BA,IAAK,gBAA1C;;QACF;UACE,OAAO,IAAP;MARF;IAUD;;IACD,OAAO,IAAP;EACD;;EAEDG,eAAe,GAA4B;IAAA,IAA3BC,KAA2B,uEAAnB,GAAmB;IAAA,IAAdC,MAAc,uEAAL,GAAK;IACzC,MAAML,IAAI,GAAG,KAAKJ,YAAL,EAAb;;IACA,IAAII,IAAJ,EAAU;MACR,OAAQ,kBAAiBI,KAAM,aAAYC,MAAO,wCAAuCL,IAAK,mHAA9F;IACD;;IACD,OAAO,IAAP;EACD;;EAEDM,YAAY,GAAG;IACb,IAAI,KAAKnB,OAAL,KAAiB,SAArB,EAAgC;MAC9B,MAAMU,MAAM,GAAG,8DAAf;MACA,MAAMC,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,KAAKb,GAAjB,CAAd;MACA,MAAMqB,SAAS,GAAGT,KAAK,CAAC,CAAD,CAAvB;MACA,OAAOS,SAAP;IACD;;IACD,OAAO,IAAP;EACD;;AA1DiC;AA6DpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AACA;;;AAEA,eAAelB,WAAf"},"metadata":{},"sourceType":"module"}